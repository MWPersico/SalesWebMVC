@using SalesWebMVC.Models;
@using SalesWebMVC.Models.Enums
@model SalesWebMVC.Models.SalesRecord

@{
    Dictionary<SaleStatus, string> colorMap = new Dictionary<SaleStatus, string>()
    {
        { SaleStatus.BILLED, "success" },
        { SaleStatus.PENDING, "warning" },
        { SaleStatus.CANCELED, "danger" }
    };

    ViewData["Title"] = "Details";
    ViewData["StatusColor"] = colorMap[Model.Status];
}

<h1>Details</h1>

<div>
    <h4>SalesRecord</h4>
    <hr />
    <dl class="row">
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Date)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Date)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Amount)
        </dt>
        <dd class = "col-sm-10">
            @Html.DisplayFor(model => model.Amount)
        </dd>
        <dt class = "col-sm-2">
            @Html.DisplayNameFor(model => model.Status)
        </dt>
        <dd class="col-sm-10 text-@ViewData["StatusColor"]">
            @Html.DisplayFor(model => model.Status)
        </dd>
        <dt class="col-sm-2">
            <a clas="text-decoration-none" href="/Sellers/Details/@Model.SellerId">@Html.DisplayNameFor(model => model.Seller)</a>
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.Seller.Name)
        </dd>
    </dl>
</div>
<div>
    <a asp-action="Edit" asp-route-id="@Model?.Id">Edit</a> |
    <a asp-action="Index">Back to List</a>
</div>
